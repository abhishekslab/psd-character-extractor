import { Avatar } from '../../domain/entities/Avatar';
import type { AvatarRepository, ExportOptions } from '../../domain/repositories/AvatarRepository';
import { RigId } from '../../domain/value-objects/RigId';
import { DrawOrder } from '../../domain/value-objects/DrawOrder';
import { AnchorPoint } from '../../domain/value-objects/AnchorPoint';
import JSZip from 'jszip';

export class InMemoryAvatarRepository implements AvatarRepository {
  private currentAvatar: Avatar | null = null;

  constructor() {
    this.initializeDefaultAvatar();
  }

  async getCurrent(): Promise<Avatar | null> {
    return this.currentAvatar;
  }

  async save(avatar: Avatar): Promise<void> {
    this.currentAvatar = avatar.clone();
  }

  async exportBundle(avatar: Avatar, options: ExportOptions): Promise<Blob> {
    const zip = new JSZip();

    // Generate manifest
    const manifest = this.generateManifest(avatar);
    zip.file('manifest.json', JSON.stringify(manifest, null, 2));

    // Add avatar.json
    zip.file('avatar.json', JSON.stringify(avatar.toJSON(), null, 2));

    // Add README
    zip.file('README.txt', this.generateReadme(avatar));

    // Generate the bundle
    const content = await zip.generateAsync({
      type: 'blob',
      compression: 'DEFLATE',
      compressionOptions: {
        level: options.compressionLevel
      }
    });

    return content;
  }

  private initializeDefaultAvatar(): void {
    const defaultAnchors = new Map([
      ['headPivot', AnchorPoint.create(512, 256)],
      ['mouthCenter', AnchorPoint.create(520, 320)],
      ['neckBase', AnchorPoint.create(512, 400)],
      ['earL', AnchorPoint.create(450, 280)],
      ['earR', AnchorPoint.create(574, 280)]
    ]);

    this.currentAvatar = new Avatar(
      'default-avatar',
      RigId.default(),
      new Map(),
      DrawOrder.default(),
      defaultAnchors
    );
  }

  private generateManifest(avatar: Avatar) {
    return {
      name: 'Character Avatar',
      version: '1.0.0',
      schema: {
        avatar: '1.0.0',
        bundle: '1.0.0'
      },
      entry: {
        avatar: 'avatar.json'
      },
      rigId: avatar.rigId.value,
      fitBoxes: {
        hair: { x: 280, y: 40, w: 460, h: 520 },
        top: { x: 240, y: 380, w: 520, h: 420 },
        accessories: { x: 200, y: 100, w: 600, h: 800 }
      },
      hashes: {}
    };
  }

  private generateReadme(avatar: Avatar): string {
    return `# Character Avatar Bundle

This bundle contains a complete avatar definition with slices, mappings, and metadata.

## Contents

- manifest.json: Bundle metadata and configuration
- avatar.json: Avatar definition with slots and draw order

## Avatar Information

- Rig ID: ${avatar.rigId.value}
- Generator: ${avatar.generator}
- Mapped Slots: ${avatar.getSlotPaths().length}
- Anchors: ${avatar.anchors.size}

Generated by Avatar Assembly UI - Clean Architecture Implementation
${new Date().toISOString()}
`;
  }
}