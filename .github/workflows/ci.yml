name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: '3.8'
  MINIMUM_PYTHON: '3.8'
  MAXIMUM_PYTHON: '3.12'

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        exclude:
          # Reduce matrix for faster CI on PRs
          - os: windows-latest
            python-version: '3.9'
          - os: windows-latest
            python-version: '3.10'
          - os: macos-latest
            python-version: '3.9'
          - os: macos-latest
            python-version: '3.10'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt', '**/setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libffi-dev libjpeg-dev zlib1g-dev

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -e .
        pip install pytest pytest-cov pytest-mock flake8 black isort mypy

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Check code formatting with black
      run: |
        black --check --diff src/ tests/

    - name: Check import sorting with isort
      run: |
        isort --check-only --diff src/ tests/

    - name: Type checking with mypy
      run: |
        mypy src/ --ignore-missing-imports
      continue-on-error: true  # Don't fail CI on type errors for now

    - name: Run unit tests
      run: |
        pytest tests/ -v --cov=src/psd_extractor --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.9'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
        verbose: true

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .

    - name: Create test PSD files
      run: |
        mkdir -p test_data
        # Create dummy PSD-like files for CLI testing
        echo "dummy psd content" > test_data/test_character.psd
        echo "dummy psd content" > test_data/test_character2.psd

    - name: Test CLI commands
      run: |
        # Test CLI help
        python -m psd_extractor.cli --help

        # Test analyze command (will fail gracefully with dummy files)
        python -m psd_extractor.cli analyze test_data/test_character.psd || true

        # Test create-mapping command
        python -m psd_extractor.cli create-mapping --output test_mapping.json
        test -f test_mapping.json

    - name: Test package import
      run: |
        python -c "
        from psd_extractor import CharacterExtractor, PSDAnalyzer, BatchProcessor, ImageOptimizer
        print('All imports successful')
        "

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit[toml]

    - name: Run safety check
      run: |
        safety check --json || true

    - name: Run bandit security scan
      run: |
        bandit -r src/ -f json || true

  docs-build:
    name: Documentation Build
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install sphinx sphinx-rtd-theme

    - name: Check documentation files
      run: |
        # Verify all required documentation exists
        test -f README.md
        test -f docs/README.md
        test -f docs/quick-start.md
        test -f docs/cli-reference.md
        test -f examples/README.md

    - name: Validate markdown syntax
      run: |
        # Basic markdown validation
        python -c "
        import re
        import sys

        def check_markdown_file(filepath):
            with open(filepath) as f:
                content = f.read()

            # Check for common markdown issues
            if ']((' in content:
                print(f'Warning: Possible broken link in {filepath}')

            # Check for missing alt text in images
            img_pattern = r'!\[\]\('
            if re.search(img_pattern, content):
                print(f'Warning: Image without alt text in {filepath}')

        for file in ['README.md', 'docs/README.md', 'docs/quick-start.md']:
            check_markdown_file(file)

        print('Documentation validation completed')
        "

  build-package:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [test, integration-test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine wheel

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-package
        path: dist/
        retention-days: 7

  publish-test-pypi:
    name: Publish to Test PyPI
    runs-on: ubuntu-latest
    needs: build-package
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: python-package
        path: dist/

    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        skip-existing: true

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: build-package
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: python-package
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}

  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest-benchmark

    - name: Run performance benchmarks
      run: |
        # Create a simple performance test
        python -c "
        import time
        from unittest.mock import Mock, patch

        # Mock performance test for image optimization
        print('Running performance benchmarks...')

        with patch('psd_tools.PSDImage') as mock_psd:
            mock_psd.open.return_value = Mock()

            start_time = time.time()
            from psd_extractor import ImageOptimizer
            optimizer = ImageOptimizer()

            # Simulate optimization operations
            for i in range(100):
                settings = optimizer.get_optimization_settings()
                optimizer.set_quality(85)

            end_time = time.time()
            duration = end_time - start_time

            print(f'ImageOptimizer operations: {duration:.4f}s for 100 operations')
            print(f'Average per operation: {duration/100*1000:.2f}ms')

            if duration > 1.0:  # If it takes more than 1 second
                print('WARNING: Performance slower than expected')
            else:
                print('Performance benchmark passed')
        "

  notify-status:
    name: Notify Build Status
    runs-on: ubuntu-latest
    needs: [test, integration-test, security-scan, docs-build, build-package]
    if: always()

    steps:
    - name: Determine overall status
      id: status
      run: |
        if [[ "${{ needs.test.result }}" == "success" &&
              "${{ needs.integration-test.result }}" == "success" &&
              "${{ needs.build-package.result }}" == "success" ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
        fi

    - name: Report status
      run: |
        echo "Build Status: ${{ steps.status.outputs.status }}"
        echo "Test Result: ${{ needs.test.result }}"
        echo "Integration Test Result: ${{ needs.integration-test.result }}"
        echo "Security Scan Result: ${{ needs.security-scan.result }}"
        echo "Docs Build Result: ${{ needs.docs-build.result }}"
        echo "Package Build Result: ${{ needs.build-package.result }}"